---
- hosts: all
  become: true
  tasks:
  - name: Install and configure prerequisites
    shell:
      cmd: |
        cat > /etc/modules-load.d/containerd.conf << EOF
        overlay
        br_netfilter
        EOF
        modprobe overlay
        modprobe br_netfilter

  - name: Install Coreutils. Should be present, but didn't work.
    apt:
      name: coreutils
      state: present
      update_cache: yes

  - name: Setup required sysctl params, these persist across reboots
    shell:
      cmd: |
        cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
        net.bridge.bridge-nf-call-iptables  = 1
        net.ipv4.ip_forward                 = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        EOF

  - name:  Apply sysctl params without reboot
    shell:
      cmd: |
        sysctl --system

  - name: Install containerd
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - containerd

  - name: Configure containerd
    shell:
      cmd: |
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml

  - name: Restart containerd
    shell:
      cmd: |
        systemctl restart containerd
  
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    shell:
      cmd: |
        swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      create: yes

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Initialize the Kubernetes cluster using kubeadm
    shell:
      cmd: |
        kubeadm init --apiserver-advertise-address="192.168.56.10" --apiserver-cert-extra-sans="192.168.56.10"  --node-name master --pod-network-cidr=192.168.0.0/16

  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
      - mkdir -p /home/vagrant/.kube
      - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
      - chown vagrant:vagrant /home/vagrant/.kube/config

  - name: Install Weave CNI
    become: false
    shell:
      cmd: |
        kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

  - name: Generate join command
    shell:
      cmd: |
        kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
